#!/usr/bin/env bb
; vim: ft=clojure
(ns user
  (:require
    [clojure.pprint :refer [pprint]]))

(def git-url "https://github.com/jacobobryant/flub")

(defn get-ancestors [get-parents children]
  (into (set children)
    (some->> children
      (mapcat get-parents)
      distinct
      not-empty
      (apply get-ancestors))))

(defn sync []
  (let [{:keys [projects deps]} (edn/read-string (slurp "flub.edn"))
        sha (str/trim (:out (shell/sh "git" "rev-parse" "HEAD")))]
    (doseq [[proj-name config] projects
            :let [dir (str proj-name)
                  proj-ancestors (get-ancestors
                                   #(get-in projects [% :projects])
                                   (:projects config))
                  proj-deps {:deps (into
                                     (select-keys deps (:deps config))
                                     (for [p proj-ancestors]
                                       [(symbol "flub" (str p)) {:git/url git-url
                                                                 :deps/root (str p)
                                                                 :sha sha}]))}]]

      (when-not (fs/directory? dir)
        (fs/create-dir dir))
      (spit (fs/file dir "deps.edn") (with-out-str (pprint proj-deps))))))

(let [[f & args] *command-line-args*]
  (apply (resolve (symbol f)) args))
